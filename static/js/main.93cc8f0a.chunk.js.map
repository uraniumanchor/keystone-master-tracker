{"version":3,"sources":["constants/dungeons.ts","constants/players.ts","store/index.ts","Row.tsx","App.tsx","index.tsx"],"names":["dungeons","players","reducer","combineReducers","entities","entitiesReducer","queries","queriesReducer","getQueries","state","getEntities","store","createStore","applyMiddleware","queryMiddleware","superagentInterface","Row","player","playerKey","React","useMemo","requests","map","id","url","body","season","mode","characterId","transform","reduce","memo","dungeon","index","findIndex","d","Error","mythic_level","did","includes","push","update","oldValue","newValue","run","Math","max","Object","entries","useRequests","isFinished","refresh","runs","useSelector","onClick","i","className","App","dungeonData","name","length","values","join","ReactDOM","render","StrictMode","queriesSelector","document","getElementById"],"mappings":"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","file":"static/js/main.93cc8f0a.chunk.js","sourcesContent":["export const dungeons: [number, string][] = [\n  [12837, 'Spires of Ascension'],\n  [13334, 'Mists of Tirna Scithe'],\n  [12831, 'Halls of Atonement'],\n  [12842, 'Sanguine Depths'],\n  [13228, 'Plaguefall'],\n  [12841, 'Theater of Pain'],\n  [12916, 'The Necrotic Wake'],\n  [13309, 'De Other Side'],\n];\n\nexport interface Dungeons {\n  [key: number]: string[];\n}\n","export const players: [string, string, number[]][] = [\n  ['Bleeding Hollow', 'Bralithice', [41052277]],\n  ['Bleeding Hollow', 'Cherryclaw', [40479679, 59190765, 57676870, 57818774]],\n  // ['Bleeding Hollow', 'Dhasselhoof', [57818733]],\n  ['Bleeding Hollow', 'Dillido', [54067734]],\n  ['Bleeding Hollow', 'Galamesh', [19992928]],\n  ['Bleeding Hollow', 'Goreheals', [5475072]],\n  ['Bleeding Hollow', 'Jamesjoyce', [57818719]],\n  ['Bleeding Hollow', 'Karienne', [55891950]],\n  ['Bleeding Hollow', 'Karla', [57722294, 41889090, 57818767]],\n  ['Bleeding Hollow', 'Layneth', [56240236]],\n  // ['Bleeding Hollow', 'Montanabig', [34724009]],\n  ['Bleeding Hollow', 'Sharrett', [34723936]],\n  // ['Bleeding Hollow', 'Silpion', [16718619]],\n  ['Bleeding Hollow', 'Wardscorned', [56236237]],\n];\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport superagentInterface from 'redux-query-interface-superagent';\n\nconst reducer = combineReducers({\n  entities: entitiesReducer,\n  queries: queriesReducer,\n});\n\nexport type StoreState = {\n  queries: any;\n  entities: any;\n};\n\nexport const getQueries = (state: StoreState) => state.queries;\nexport const getEntities = (state: StoreState) => state.entities;\n\nconst store = createStore(reducer, applyMiddleware(queryMiddleware(superagentInterface, getQueries, getEntities)));\n\nexport default store;\n","import React from 'react';\nimport { useRequests } from 'redux-query-react';\nimport { QueryConfig } from 'redux-query';\nimport { Dungeons, dungeons } from './constants/dungeons';\nimport { useSelector } from 'react-redux';\nimport { getEntities } from './store';\n\nimport './Row.css';\n\ntype RowProps = {\n  player: [string, string, number[]];\n};\n\nfunction Row({ player }: RowProps) {\n  const playerKey = React.useMemo(() => `${player[1]}-${player[0]}`, [player]);\n  const requests = React.useMemo<QueryConfig[]>(\n    () =>\n      player[2].map((id) => ({\n        url: 'https://0ijiy7wzfj.execute-api.us-east-1.amazonaws.com/mythic-plus-scored-runs',\n        body: {\n          season: 'season-sl-1',\n          mode: 'timed',\n          characterId: id,\n        },\n        transform: (body) => {\n          return {\n            [playerKey]: body.dungeons.reduce((memo: number[], dungeon: any) => {\n              const index = dungeons.findIndex((d) => d[0] === dungeon.dungeon.id);\n              if (index === -1) {\n                throw new Error(`unknown dungeon ${dungeon.dungeon.id}`);\n              }\n              memo[index] = dungeon.mythic_level;\n              return memo;\n            }, []),\n            dungeons: body.dungeons.reduce((memo: Dungeons, dungeon: any) => {\n              const did = dungeon.dungeon.id;\n              memo[did] = memo[did] || [];\n              if (dungeon.mythic_level >= 15 && !memo[did].includes(playerKey)) {\n                memo[did].push(playerKey);\n              }\n              return memo;\n            }, {}),\n          };\n        },\n        update: {\n          [playerKey]: (oldValue: number[] = [], newValue: number[]) => {\n            return newValue.reduce((memo, run, index) => {\n              memo.push(Math.max(oldValue[index] || 0, run || 0));\n              return memo;\n            }, [] as number[]);\n          },\n          dungeons: (oldValue: Dungeons = {}, newValue: Dungeons) => {\n            return Object.entries(newValue).reduce((memo: Dungeons, [did, players]: [string, string[]]) => {\n              memo[+did] = players.reduce((players, player) => {\n                debugger;\n                if (!players.includes(player)) {\n                  players.push(player);\n                }\n                return players;\n              }, (memo[+did] || []) as string[]);\n              debugger;\n\n              return memo;\n            }, oldValue);\n          },\n        },\n      })),\n    [player, playerKey]\n  );\n\n  const [{ isFinished }, refresh] = useRequests(requests);\n\n  const runs = useSelector(getEntities)[playerKey];\n\n  return (\n    <tr>\n      <td>\n        {playerKey} <button onClick={refresh}>Refresh</button>\n      </td>\n      {isFinished ? (\n        <>\n          {runs.map((run: number, i: number) => (\n            <td key={i} className={`run-${run}`}>\n              +{run || 0}\n            </td>\n          ))}\n          <td>{runs.reduce((memo: number, run: number) => memo + (run >= 15 ? 0 : 1), 0)}</td>\n        </>\n      ) : (\n        <td>Loading...</td>\n      )}\n    </tr>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport './App.css';\nimport { Dungeons, dungeons } from './constants/dungeons';\nimport { players } from './constants/players';\nimport Row from './Row';\nimport { useSelector } from 'react-redux';\nimport { getEntities } from './store';\n\nfunction App() {\n  const dungeonData: Dungeons = useSelector(getEntities).dungeons || {};\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <>\n              {dungeons.map(([id, name]) => (\n                <th key={id}>\n                  {name} ({players.length - (dungeonData[id] || []).length})\n                </th>\n              ))}\n            </>\n            <th>\n              Missing (\n              {players.length * dungeons.length -\n                Object.values(dungeonData).reduce((memo: number, players: string[]) => memo + players.length, 0)}\n              )\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player) => (\n            <Row key={player.join('-')} player={player} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store, { getQueries } from './store';\nimport { Provider } from 'react-redux';\nimport { Provider as ReduxQueryProvider } from 'redux-query-react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReduxQueryProvider queriesSelector={getQueries}>\n        <App />\n      </ReduxQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}