{"version":3,"sources":["constants/dungeons.ts","constants/players.ts","store/index.ts","Row.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dungeons","players","reducer","combineReducers","entities","entitiesReducer","queries","queriesReducer","getQueries","state","getEntities","store","createStore","applyMiddleware","queryMiddleware","superagentInterface","Row","player","playerKey","React","useMemo","request","url","body","season","mode","characterId","transform","reduce","memo","dungeon","index","findIndex","d","id","Error","mythic_level","update","oldValue","newValue","useRequest","isFinished","status","refresh","runs","useSelector","onClick","map","run","i","className","App","name","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","queriesSelector","document","getElementById"],"mappings":"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","file":"static/js/main.5b4b5223.chunk.js","sourcesContent":["export const dungeons: [number, string][] = [\n  [12837, 'Spires of Ascension'],\n  [13334, 'Mists of Tirna Scithe'],\n  [12831, 'Halls of Atonement'],\n  [12842, 'Sanguine Depths'],\n  [13228, 'Plaguefall'],\n  [12841, 'Theater of Pain'],\n  [12916, 'The Necrotic Wake'],\n  [13309, 'De Other Side'],\n];\n","export const players: [string, string, number][] = [\n  ['Bleeding Hollow', 'Bralithice', 41052277],\n  ['Bleeding Hollow', 'Cherryclaw', 40479679],\n  ['Bleeding Hollow', 'Dhasselhoof', 57818733],\n  ['Bleeding Hollow', 'Dillido', 54067734],\n  ['Bleeding Hollow', 'Galamesh', 19992928],\n  ['Bleeding Hollow', 'Goreheals', 5475072],\n  ['Bleeding Hollow', 'Jamesjoyce', 57818719],\n  ['Bleeding Hollow', 'Karienne', 55891950],\n  ['Bleeding Hollow', 'Karla', 57722294],\n  ['Bleeding Hollow', 'Layneth', 56240236],\n  ['Bleeding Hollow', 'Montanabig', 34724009],\n  ['Bleeding Hollow', 'Sharrett', 34723936],\n  ['Bleeding Hollow', 'Silpion', 16718619],\n  ['Bleeding Hollow', 'Wardscorned', 56236237],\n];\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport superagentInterface from 'redux-query-interface-superagent';\n\nconst reducer = combineReducers({\n  entities: entitiesReducer,\n  queries: queriesReducer,\n});\n\nexport type StoreState = {\n  queries: any;\n  entities: any;\n};\n\nexport const getQueries = (state: StoreState) => state.queries;\nexport const getEntities = (state: StoreState) => state.entities;\n\nconst store = createStore(reducer, applyMiddleware(queryMiddleware(superagentInterface, getQueries, getEntities)));\n\nexport default store;\n","import React from 'react';\nimport { useRequest } from 'redux-query-react';\nimport { QueryConfig } from 'redux-query';\nimport { dungeons } from './constants/dungeons';\nimport { useSelector } from 'react-redux';\nimport { getEntities } from './store';\n\nimport './Row.css';\n\ntype RowProps = {\n  player: [string, string, number];\n};\n\nfunction Row({ player }: RowProps) {\n  const playerKey = React.useMemo(() => `${player[1]}-${player[0]}`, [player]);\n  const request = React.useMemo<QueryConfig>(\n    () => ({\n      url: 'https://0ijiy7wzfj.execute-api.us-east-1.amazonaws.com/mythic-plus-scored-runs',\n      body: {\n        season: 'season-sl-1',\n        mode: 'timed',\n        characterId: player[2],\n      },\n      transform: (body) => {\n        return {\n          [playerKey]: body.dungeons.reduce((memo: number[], dungeon: any) => {\n            const index = dungeons.findIndex((d) => d[0] === dungeon.dungeon.id);\n            if (index === -1) {\n              throw new Error(`unknown dungeon ${dungeon.dungeon.id}`);\n            }\n            memo[index] = dungeon.mythic_level;\n            return memo;\n          }, []),\n        };\n      },\n      update: {\n        [playerKey]: (oldValue, newValue) => newValue,\n      },\n    }),\n    [player, playerKey]\n  );\n\n  const [{ isFinished, status }, refresh] = useRequest(request);\n\n  const runs = useSelector(getEntities)[playerKey];\n\n  return (\n    <tr>\n      <td>\n        {playerKey} <button onClick={refresh}>Refresh</button>\n      </td>\n      {isFinished && status === 200 ? (\n        <>\n          {runs.map((run: number, i: number) => (\n            <td key={i} className={`run-${run}`}>\n              +{run || 0}\n            </td>\n          ))}\n        </>\n      ) : (\n        <td>Loading...</td>\n      )}\n    </tr>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport './App.css';\nimport { dungeons } from './constants/dungeons';\nimport { players } from './constants/players';\nimport Row from './Row';\n\nfunction App() {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <>\n              {dungeons.map(([id, name]) => (\n                <th key={id}>{name}</th>\n              ))}\n            </>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player) => (\n            <Row key={player.join('-')} player={player} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store, { getQueries } from './store';\nimport { Provider } from 'react-redux';\nimport { Provider as ReduxQueryProvider } from 'redux-query-react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReduxQueryProvider queriesSelector={getQueries}>\n        <App />\n      </ReduxQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}