{"version":3,"sources":["constants/dungeons.ts","constants/players.ts","store/index.ts","Row.tsx","App.tsx","index.tsx"],"names":["dungeons","players","reducer","combineReducers","entities","entitiesReducer","queries","queriesReducer","getQueries","state","getEntities","store","createStore","applyMiddleware","queryMiddleware","superagentInterface","Row","player","playerKey","React","useMemo","requests","map","id","url","body","season","mode","characterId","transform","reduce","memo","dungeon","index","findIndex","d","Error","mythic_level","update","oldValue","newValue","run","push","Math","max","useRequests","isFinished","refresh","runs","useSelector","onClick","i","className","App","name","join","ReactDOM","render","StrictMode","queriesSelector","document","getElementById"],"mappings":"mQAAaA,G,MAA+B,CAC1C,CAAC,MAAO,uBACR,CAAC,MAAO,yBACR,CAAC,MAAO,sBACR,CAAC,MAAO,mBACR,CAAC,MAAO,cACR,CAAC,MAAO,mBACR,CAAC,MAAO,qBACR,CAAC,MAAO,mBCRGC,EAAwC,CACnD,CAAC,kBAAmB,aAAc,CAAC,WACnC,CAAC,kBAAmB,aAAc,CAAC,SAAU,SAAU,SAAU,WACjE,CAAC,kBAAmB,cAAe,CAAC,WACpC,CAAC,kBAAmB,UAAW,CAAC,WAChC,CAAC,kBAAmB,WAAY,CAAC,WACjC,CAAC,kBAAmB,YAAa,CAAC,UAClC,CAAC,kBAAmB,aAAc,CAAC,WACnC,CAAC,kBAAmB,WAAY,CAAC,WACjC,CAAC,kBAAmB,QAAS,CAAC,SAAU,WACxC,CAAC,kBAAmB,UAAW,CAAC,WAChC,CAAC,kBAAmB,aAAc,CAAC,WACnC,CAAC,kBAAmB,WAAY,CAAC,WACjC,CAAC,kBAAmB,UAAW,CAAC,WAChC,CAAC,kBAAmB,cAAe,CAAC,Y,qDCVhCC,EAAUC,YAAgB,CAC9BC,SAAUC,kBACVC,QAASC,mBAQEC,EAAa,SAACC,GAAD,OAAuBA,EAAMH,SAC1CI,EAAc,SAACD,GAAD,OAAuBA,EAAML,UAIzCO,EAFDC,YAAYV,EAASW,YAAgBC,0BAAgBC,IAAqBP,EAAYE,K,eCsDrFM,MA1Df,YAAoC,IAArBC,EAAoB,EAApBA,OACPC,EAAYC,IAAMC,SAAQ,2BAASH,EAAO,GAAhB,YAAsBA,EAAO,MAAM,CAACA,IAC9DI,EAAWF,IAAMC,SACrB,kBAAMH,EAAO,GAAGK,KAAI,SAAAC,GAAE,MAAK,CACzBC,IAAK,iFACLC,KAAM,CACJC,OAAQ,cACRC,KAAM,QACNC,YAAaL,GAEfM,UAAW,SAACJ,GACV,OAAO,eACJP,EAAYO,EAAKzB,SAAS8B,QAAO,SAACC,EAAgBC,GACjD,IAAMC,EAAQjC,EAASkC,WAAU,SAACC,GAAD,OAAOA,EAAE,KAAOH,EAAQA,QAAQT,MACjE,IAAe,IAAXU,EACF,MAAM,IAAIG,MAAJ,0BAA6BJ,EAAQA,QAAQT,KAGrD,OADAQ,EAAKE,GAASD,EAAQK,aACfN,IACN,MAGPO,OAAO,eACJpB,GAAY,SAACqB,EAAUC,GACpB,OAAOA,EAASV,QAAO,SAACC,EAAMU,EAAKR,GAE/B,OADAF,EAAKW,KAAKC,KAAKC,KAAY,OAARL,QAAQ,IAARA,OAAA,EAAAA,EAAWN,KAAU,EAAGQ,GAAO,IAC3CV,IACR,aAIX,CAACd,EAAQC,IA/BsB,EAkCC2B,sBAAYxB,GAlCb,mBAkCxByB,EAlCwB,KAkCxBA,WAAcC,EAlCU,KAoC3BC,EAAOC,sBAAYvC,GAAaQ,GAEtC,OACE,+BACE,+BACGA,EADH,IACc,wBAAQgC,QAASH,EAAjB,wBAEbD,EACC,mCACGE,EAAK1B,KAAI,SAACmB,EAAaU,GAAd,OACR,qBAAYC,UAAS,cAASX,GAA9B,cACIA,GAAO,IADFU,QAMb,gDCnCOE,MAxBf,WACE,OACE,8BACE,kCACE,gCACE,+BACE,uBACA,mCACGrD,EAASsB,KAAI,mCAAEC,EAAF,KAAM+B,EAAN,YACZ,6BAAcA,GAAL/B,aAKjB,gCACGtB,EAAQqB,KAAI,SAACL,GAAD,OACX,cAAC,EAAD,CAA4BA,OAAQA,GAA1BA,EAAOsC,KAAK,iBCdlCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CAAU/C,MAAOA,EAAjB,SACE,cAAC,WAAD,CAAoBgD,gBAAiBnD,EAArC,SACE,cAAC,EAAD,UAINoD,SAASC,eAAe,W","file":"static/js/main.547584a9.chunk.js","sourcesContent":["export const dungeons: [number, string][] = [\n  [12837, 'Spires of Ascension'],\n  [13334, 'Mists of Tirna Scithe'],\n  [12831, 'Halls of Atonement'],\n  [12842, 'Sanguine Depths'],\n  [13228, 'Plaguefall'],\n  [12841, 'Theater of Pain'],\n  [12916, 'The Necrotic Wake'],\n  [13309, 'De Other Side'],\n];\n","export const players: [string, string, number[]][] = [\n  ['Bleeding Hollow', 'Bralithice', [41052277]],\n  ['Bleeding Hollow', 'Cherryclaw', [40479679, 59190765, 57676870, 57818774]],\n  ['Bleeding Hollow', 'Dhasselhoof', [57818733]],\n  ['Bleeding Hollow', 'Dillido', [54067734]],\n  ['Bleeding Hollow', 'Galamesh', [19992928]],\n  ['Bleeding Hollow', 'Goreheals', [5475072]],\n  ['Bleeding Hollow', 'Jamesjoyce', [57818719]],\n  ['Bleeding Hollow', 'Karienne', [55891950]],\n  ['Bleeding Hollow', 'Karla', [57722294, 41889090]],\n  ['Bleeding Hollow', 'Layneth', [56240236]],\n  ['Bleeding Hollow', 'Montanabig', [34724009]],\n  ['Bleeding Hollow', 'Sharrett', [34723936]],\n  ['Bleeding Hollow', 'Silpion', [16718619]],\n  ['Bleeding Hollow', 'Wardscorned', [56236237]],\n];\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport superagentInterface from 'redux-query-interface-superagent';\n\nconst reducer = combineReducers({\n  entities: entitiesReducer,\n  queries: queriesReducer,\n});\n\nexport type StoreState = {\n  queries: any;\n  entities: any;\n};\n\nexport const getQueries = (state: StoreState) => state.queries;\nexport const getEntities = (state: StoreState) => state.entities;\n\nconst store = createStore(reducer, applyMiddleware(queryMiddleware(superagentInterface, getQueries, getEntities)));\n\nexport default store;\n","import React from 'react';\nimport { useRequests } from 'redux-query-react';\nimport { QueryConfig } from 'redux-query';\nimport { dungeons } from './constants/dungeons';\nimport { useSelector } from 'react-redux';\nimport { getEntities } from './store';\n\nimport './Row.css';\n\ntype RowProps = {\n  player: [string, string, number[]];\n};\n\nfunction Row({ player }: RowProps) {\n  const playerKey = React.useMemo(() => `${player[1]}-${player[0]}`, [player]);\n  const requests = React.useMemo<QueryConfig[]>(\n    () => player[2].map(id => ({\n      url: 'https://0ijiy7wzfj.execute-api.us-east-1.amazonaws.com/mythic-plus-scored-runs',\n      body: {\n        season: 'season-sl-1',\n        mode: 'timed',\n        characterId: id,\n      },\n      transform: (body) => {\n        return {\n          [playerKey]: body.dungeons.reduce((memo: number[], dungeon: any) => {\n            const index = dungeons.findIndex((d) => d[0] === dungeon.dungeon.id);\n            if (index === -1) {\n              throw new Error(`unknown dungeon ${dungeon.dungeon.id}`);\n            }\n            memo[index] = dungeon.mythic_level;\n            return memo;\n          }, []),\n        };\n      },\n      update: {\n        [playerKey]: (oldValue, newValue: number[]) => {\n            return newValue.reduce((memo, run, index) => {\n                memo.push(Math.max(oldValue?.[index] || 0, run || 0));\n                return memo;\n            }, [] as number[]);\n        },\n      },\n    })),\n    [player, playerKey]\n  );\n\n  const [{ isFinished }, refresh] = useRequests(requests);\n\n  const runs = useSelector(getEntities)[playerKey];\n\n  return (\n    <tr>\n      <td>\n        {playerKey} <button onClick={refresh}>Refresh</button>\n      </td>\n      {isFinished ? (\n        <>\n          {runs.map((run: number, i: number) => (\n            <td key={i} className={`run-${run}`}>\n              +{run || 0}\n            </td>\n          ))}\n        </>\n      ) : (\n        <td>Loading...</td>\n      )}\n    </tr>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport './App.css';\nimport { dungeons } from './constants/dungeons';\nimport { players } from './constants/players';\nimport Row from './Row';\n\nfunction App() {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <>\n              {dungeons.map(([id, name]) => (\n                <th key={id}>{name}</th>\n              ))}\n            </>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player) => (\n            <Row key={player.join('-')} player={player} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store, { getQueries } from './store';\nimport { Provider } from 'react-redux';\nimport { Provider as ReduxQueryProvider } from 'redux-query-react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReduxQueryProvider queriesSelector={getQueries}>\n        <App />\n      </ReduxQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}